/*
 This file belongs to the Servoy development and deployment environment, Copyright (C) 1997-2010 Servoy BV

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; either version 3 of the License, or (at your option) any
 later version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License along
 with this program; if not, see http://www.gnu.org/licenses or write to the Free
 Software Foundation,Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 */
package com.servoy.j2db.query;

import java.util.concurrent.atomic.AtomicLong;

import com.servoy.j2db.util.Immutable;
import com.servoy.j2db.util.serialize.IWriteReplaceExtended;
import com.servoy.j2db.util.serialize.ReplacedObject;
import com.servoy.j2db.util.visitor.IVisitor;

/**
 * Table class in the query structure. The alias is generated by this class in the constructor.
 * 
 * @author rgansevles
 * 
 */
public final class QueryTable implements IQueryElement, Immutable, IWriteReplaceExtended
{
	private final String name;
	private final String dataSource;
	private final String alias;
	private final boolean needsQuoting;
	private transient String catalogName;
	private transient String schemaName;
	private final transient boolean generatedAlias;
	private transient boolean isComplete;

	private static AtomicLong aliasCounter = new AtomicLong(0);

	/**
	 * @param name table name as used in sql, may be quoted
	 */
	public QueryTable(String name, String dataSource, String catalogName, String schemaName)
	{
		this(name, dataSource, catalogName, schemaName, true);
	}

	/**
	 * @param name table name as used in sql, may be quoted
	 */
	public QueryTable(String name, String dataSource, String catalogName, String schemaName, boolean needsQuoting)
	{
		this(name, dataSource, catalogName, schemaName, null, needsQuoting);
	}

	public QueryTable(String name, String dataSource, String catalogName, String schemaName, String alias)
	{
		this(name, dataSource, catalogName, schemaName, alias, true);
	}

	public QueryTable(String name, String dataSource, String catalogName, String schemaName, String alias, boolean needsQuoting)
	{
		this.dataSource = dataSource;
		this.name = name;
		this.catalogName = catalogName;
		this.schemaName = schemaName;
		this.generatedAlias = alias == null;
		this.alias = this.generatedAlias ? generateAlias(name) : alias;
		this.needsQuoting = needsQuoting;
		this.isComplete = true;
	}

	/**
	 * @param name
	 */
	private static String generateAlias(String name)
	{
		// Skip anything but letters and digits
		StringBuilder aliasBuf = new StringBuilder();
		char[] chars = name.toCharArray();
		for (char element : chars)
		{
			if (Character.isLetterOrDigit(element))
			{
				aliasBuf.append(element);
			}
		}

		// generate next counter
		long n = aliasCounter.incrementAndGet() & 0x7fffffffffffffffL;

		if (aliasBuf.length() == 0) // weird table name
		{
			return "T_" + n; //$NON-NLS-1$
		}

		aliasBuf.append(n);
		return aliasBuf.toString();
	}

	public String getName()
	{
		return name;
	}

	public String getDataSource()
	{
		return dataSource;
	}

	public String getCatalogName()
	{
		return this.catalogName;
	}

	public String getSchemaName()
	{
		return this.schemaName;
	}

	public String getAlias()
	{
		return alias;
	}

	public boolean isAliasGenerated()
	{
		return generatedAlias;
	}

	public boolean needsQuoting()
	{
		return needsQuoting;
	}

	public boolean isComplete()
	{
		return isComplete;
	}

	public Object shallowClone() throws CloneNotSupportedException
	{
		return super.clone();
	}

	public void acceptVisitor(IVisitor visitor)
	{
	}

	@Override
	public int hashCode()
	{
		final int prime = 31;
		int result = 1;
		result = prime * result + ((alias == null) ? 0 : alias.hashCode());
		result = prime * result + ((catalogName == null) ? 0 : catalogName.hashCode());
		result = prime * result + ((dataSource == null) ? 0 : dataSource.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((schemaName == null) ? 0 : schemaName.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		QueryTable other = (QueryTable)obj;
		if (alias == null)
		{
			if (other.alias != null) return false;
		}
		else if (!alias.equals(other.alias)) return false;
		if (catalogName == null)
		{
			if (other.catalogName != null) return false;
		}
		else if (!catalogName.equals(other.catalogName)) return false;
		if (dataSource == null)
		{
			if (other.dataSource != null) return false;
		}
		else if (!dataSource.equals(other.dataSource)) return false;
		if (name == null)
		{
			if (other.name != null) return false;
		}
		else if (!name.equals(other.name)) return false;
		if (schemaName == null)
		{
			if (other.schemaName != null) return false;
		}
		else if (!schemaName.equals(other.schemaName)) return false;
		return true;
	}

	@Override
	public String toString()
	{
		StringBuilder sb = new StringBuilder();
		if (catalogName != null)
		{
			sb.append(catalogName).append(':');
		}
		if (schemaName != null)
		{
			sb.append(schemaName).append(':');
		}
		sb.append(name);
		if (dataSource != null) sb.append('<').append(dataSource).append('>');
		if (alias != null)
		{
			sb.append('#').append(alias);
		}
		return sb.toString();
	}

	///////// serialization ////////////////

	public Object writeReplace()
	{
		return writeReplace(false);
	}

	public ReplacedObject writeReplace(boolean full)
	{
		// just need to serialize the name, the alias can be regenerated.
		// Note: this only works if the query object was packed before serialization!
		// catalogName and schemaName will be regenerated on the server
		Object replaced;
		if (full)
		{
			replaced = generatedAlias ? new Object[] { name, dataSource, Boolean.valueOf(needsQuoting), catalogName, schemaName }
				: new Object[] { name, dataSource, Boolean.valueOf(needsQuoting), catalogName, schemaName, alias };
		}
		else
		{
			replaced = generatedAlias ? new Object[] { name, dataSource, Boolean.valueOf(needsQuoting) }
				: new Object[] { name, dataSource, Boolean.valueOf(needsQuoting), alias };
		}
		return new ReplacedObject(AbstractBaseQuery.QUERY_SERIALIZE_DOMAIN, getClass(), replaced);
	}

	public QueryTable(ReplacedObject s)
	{
		// catalogName and schemaName will be regenerated on the server
		isComplete = false;
		catalogName = null;
		schemaName = null;

		Object[] members = (Object[])s.getObject();
		int i = 0;
		name = (String)members[i++];
		dataSource = (String)members[i++];
		needsQuoting = ((Boolean)members[i++]).booleanValue();
		if (members.length == 3)
		{
			// [name, dataSource, needsQuoting] 
			alias = generateAlias(name);
			generatedAlias = true;
		}
		else if (members.length == 4)
		{
			// [name, dataSource, needsQuoting, alias]
			alias = (String)members[i++];
			generatedAlias = false;
		}
		else if (members.length == 5)
		{
			// [name, dataSource, needsQuoting, catalog, schema]
			catalogName = (String)members[i++];
			schemaName = (String)members[i++];
			isComplete = true;
			alias = generateAlias(name);
			generatedAlias = true;
		}
		else if (members.length == 6)
		{
			// [name, dataSource, needsQuoting, catalog, schema, alias]
			catalogName = (String)members[i++];
			schemaName = (String)members[i++];
			isComplete = true;
			alias = (String)members[i++];
			generatedAlias = false;
		}
		else
		{
			// should never happen!
			throw new IllegalStateException("unexpected serialized table object");
		}
	}


	/**
	 * Update the fields that have not been set in serialization
	 */
	public void update(String catalogName, String schemaName)
	{
		this.catalogName = catalogName;
		this.schemaName = schemaName;
		isComplete = true;
	}
}
