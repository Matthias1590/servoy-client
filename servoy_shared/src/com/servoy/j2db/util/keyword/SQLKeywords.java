/*
 This file belongs to the Servoy development and deployment environment, Copyright (C) 1997-2010 Servoy BV

 This program is free software; you can redistribute it and/or modify it under
 the terms of the GNU Affero General Public License as published by the Free
 Software Foundation; either version 3 of the License, or (at your option) any
 later version.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License along
 with this program; if not, see http://www.gnu.org/licenses or write to the Free
 Software Foundation,Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301
 */
package com.servoy.j2db.util.keyword;

import static java.util.Arrays.asList;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

/**
 * Reserved SQL keywords list
 * @author jblok
 */
@SuppressWarnings("nls")
public class SQLKeywords
{
	public static final Map<String, Set<String>> KEYWORDS = new HashMap<>();

	static
	{
		// @formatter:off

		// Common: for all databases
		KEYWORDS.put("common", new HashSet<>(asList(

			// SQL related
			"do",
			"boolean",
			"varbinary",
			"bigint",
			"tinyint",
			"blob",
			"long",
			"truncate",
			"type",
			"while",
			"number",
			"index",
			"modify",
			"cobol",
			"fortran",
			"pascal",
			"pl1",
			"system",
			"password",
			"uuid",
			"trigger",
			"call",
			"current_role",
			"binary",
			"cube",
			"lock",

			//official ansi SQL 92 reserved list
			"absolute",
			"action",
			"add",
			"all",
			"allocate",
			"alter",
			"and",
			"any",
			"are",
			"as",
			"asc",
			"assertion",
			"at",
			"authorization",
			"avg",
			"begin",
			"between",
			"bit",
			"bit_length",
			"both",
			"by",
			"cascade",
			"cascaded",
			"case",
			"cast",
			"catalog",
			"char",
			"character",
			"char_length",
			"character_length",
			"check",
			"close",
			"coalesce",
			"collate",
			"collation",
			"column",
			"commit",
			"connect",
			"connection",
			"constraint",
			"constraints",
			"continue",
			"convert",
			"corresponding",
			"count",
			"create",
			"cross",
			"current",
			"current_date",
			"current_time",
			"current_timestamp",
			"current_user",
			"cursor",
			"date",
			"day",
			"deallocate",
			"dec",
			"decimal",
			"declare",
			"default",
			"deferrable",
			"deferred",
			"delete",
			"desc",
			"describe",
			"descriptor",
			"diagnostics",
			"disconnect",
			"distinct",
			"domain",
			"double",
			"drop",
			"else",
			"end",
			"end-exec",
			"escape",
			"except",
			"exception",
			"exec",
			"execute",
			"exists",
			"external",
			"extract",
			"false",
			"fetch",
			"first",
			"float",
			"for",
			"foreign",
			"found",
			"from",
			"full",
			"get",
			"global",
			"go",
			"goto",
			"grant",
			"group",
			"having",
			"hour",
			"identity",
			"immediate",
			"in",
			"indicator",
			"initially",
			"inner",
			"input",
			"insensitive",
			"insert",
			"int",
			"integer",
			"intersect",
			"interval",
			"into",
			"is",
			"isolation",
			"join",
			"key",
			"language",
			"last",
			"leading",
			"left",
			"level",
			"like",
			"local",
			"lower",
			"match",
			"max",
			"min",
			"minute",
			"module",
			"month",
			"names",
			"national",
			"natural",
			"nchar",
			"next",
			"no",
			"not",
			"notnull",
			"null",
			"nullif",
			"numeric",
			"octet_length",
			"of",
			"on",
			"only",
			"open",
			"option",
			"or",
			"order",
			"outer",
			"output",
			"overlaps",
			"pad",
			"partial",
			"position",
			"precision",
			"prepare",
			"preserve",
			"primary",
			"prior",
			"privileges",
			"procedure",
			"public",
			"read",
			"real",
			"references",
			"relative",
			"restrict",
			"revoke",
			"right",
			"rollback",
			"rows",
			"schema",
			"scroll",
			"second",
			"section",
			"select",
			"session",
			"session_user",
			"set",
			"show",
			"size",
			"smallint",
			"some",
			"space",
			"sql",
			"sqlcode",
			"sqlerror",
			"sqlstate",
			"substring",
			"sum",
			"system_user",
			"table",
			"temporary",
			"then",
			"time",
			"timestamp",
			"timezone_hour",
			"timezone_minute",
			"to",
			"trailing",
			"transaction",
			"translate",
			"translation",
			"trim",
			"true",
			"union",
			"unique",
			"unknown",
			"update",
			"upper",
			"usage",
			"user",
			"using",
			"value",
			"values",
			"varchar",
			"varying",
			"view",
			"when",
			"whenever",
			"where",
			"with",
			"work",
			"write",
			"year",
			"zone"
			)));

		// Generic, only checked for databases that are not in our set
		KEYWORDS.put("generic", new HashSet<>(asList(
			"account",
			"alias",
			"arith_overflow",
			"artition",
			"class",
			"confirm",
			"controlrow",
			"count_big",
			"decrypt",
			"determnistic",
			"disk",
			"dummy",
			"dump",
			"encrypt",
			"endtran",
			"errordata",
			"errorexit",
			"exist",
			"exp_row_size",
			"identity_gap",
			"identity_start",
			"jar",
			"materialized",
			"max_rows_per_page",
			"mirror",
			"mirrorexit",
			"nonscrollable",
			"non_sensitive",
			"numeric_truncation",
			"once",
			"perm",
			"permanent",
			"processexit",
			"proxy_table",
			"quiesce",
			"readpast",
			"reorg",
			"reservepagegap",
			"scrollable",
			"semi_sensitive",
			"stringsize",
			"stripe",
			"summary",
			"syb_identity",
			"syb_restree",
			"syb_terminate",
			"title",
			"tracefile",
			"unpartition",
			"user_option",
			"xmlextract",
			"xmlparse",
			"xmltest",
			"xmlvalidate"
			)));

		// Sybase ASA
		KEYWORDS.put("sybase", new HashSet<>(asList(
			"version",
			"analyse",
			"backup",
			"binary",
			"bottom",
			"break",
			"capability",
			"char_convert",
			"checkpoint",
			"comment",
			"compressed",
			"contains",
			"dbspace",
			"deleting",
			"dynamic",
			"elseif",
			"encrypted",
			"endif",
			"existing",
			"externlogin",
			"forward",
			"holdlock",
			"identified",
			"if",
			"index",
			"inout",
			"inserting",
			"install",
			"instead",
			"integrated",
			"iq",
			"login",
			"membership",
			"message",
			"mode",
			"modify",
			"new",
			"noholdlock",
			"notify",
			"off",
			"options",
			"others",
			"out",
			"over",
			"passthrough",
			"print",
			"proc",
			"publication",
			"raiserror",
			"readtext",
			"reference",
			"release",
			"remote",
			"remove",
			"rename",
			"reorganize",
			"resource",
			"restore",
			"return",
			"rollup",
			"save",
			"savepoint",
			"schedule",
			"sensitive",
			"setuser",
			"share",
			"start",
			"stop",
			"subtrans",
			"subtransaction",
			"synchronize",
			"syntax_error",
			"top",
			"tran",
			"tsequal",
			"unsigned",
			"updating",
			"validate",
			"variable",
			"wait",
			"waitfor",
			"with_lparen",
			"writetext"
			)));

		KEYWORDS.put("firebird", new HashSet<>(asList(
			"active",
			"admin",
			"after",
			"ascending",
			"auto",
			"base_name",
			"before",
			"break",
			"cache",
			"check_point_length",
			"computed",
			"conditional",
			"connection_id",
			"containing",
			"cstring",
			"database",
			"debug",
			"descending",
			"entry_point",
			"exit",
			"file",
			"filter",
			"free_it",
			"function",
			"gdscode",
			"generator",
			"gen_id",
			"group_commit_wait_time",
			"if",
			"inactive",
			"index",
			"input_type",
			"logfile",
			"log_buffer_size",
			"manual",
			"maximum_segment",
			"merge",
			"message",
			"module_name",
			"nulls",
			"num_log_buffers",
			"output_type",
			"overflow",
			"page",
			"pages",
			"page_size",
			"parameter",
			"password",
			"plan",
			"post_event",
			"protected",
			"raw_partitions",
			"rdb$db_key",
			"record_version",
			"recreate",
			"reserv",
			"reserving",
			"retain",
			"returning_values",
			"returns",
			"role",
			"rows_affected",
			"savepoint",
			"segment",
			"shadow",
			"shared",
			"singular",
			"skip",
			"snapshot",
			"sort",
			"stability",
			"starting",
			"starts",
			"statistics",
			"sub_type",
			"suspend",
			"transaction_id",
			"trigger",
			"variable",
			"wait",
			"weekday",
			"yearday",
			//firebird 1.5
			"current_connection",
			"current_transaction",
			"row_count",
			"abs",
			"skip",
			"structural",
			"deleting",
			"inserting",
			"leave",
			"statement",
			"updating",
			"percent",
			"temporary",
			"ties"
			)));

		KEYWORDS.put("progress", new HashSet<>(asList(
			"range"
			)));

		KEYWORDS.put("oracle", new HashSet<>(asList(
			"comment",
			"exclusive",
			"file",
			"identified",
			"length",
			"mode",
			"online",
			"rename",
			"resource",
			"row",
			"share",
			"start",
			"uid",
			"validate"
			)));

		KEYWORDS.put("mysql", new HashSet<>(asList(
            "before",
            "database",
            "elseif",
            "exit",
            "function",
            "if",
            "ignore",
            "inout",
            "kill",
            "leave",
            "limit",
            "load",
            "mod",
            "out",
            "over",
            "range",
            "release",
            "rename",
            "replace",
            "return",
            "row",
            "sensitive",
            "starting",
            "unsigned",
            "use"
			)));

		KEYWORDS.put("postgres", new HashSet<>(asList(
			"analyse",
			"limit",
			"offset"
			)));

		KEYWORDS.put("hsqldb", new HashSet<>(asList(
			"row"
			)));

		KEYWORDS.put("sqlserver", new HashSet<>(asList(
			"backup",
			"break",
			"browse",
			"bulk",
			"dbcc",
			"checkpoint",
			"clustered",
			"compute",
			"contains",
			"database",
			"errlvl",
			"exit",
			"file",
			"fillfactor",
			"function",
			"holdlock",
			"if",
			"kill",
			"lineno",
			"merge",
			"nonclustered",
			"replication",
			"off",
			"offsets",
			"over",
			"percent",
			"plan",
			"print",
			"proc",
			"raiserror",
			"readtext",
			"reconfigure",
			"restore",
			"return",
			"rowcount",
			"rule",
			"save",
			"shutdown",
			"setuser",
			"statistics",
			"textsize",
			"top",
			"tran",
			"tsequal",
			"use",
			"waitfor",
			"writetext"
			)));

		KEYWORDS.put("sapdb", new HashSet<>(asList(
			"database",
			"ignore",
			"limit",
			"object",
			"top",
			"statistics",
			"uit"
			)));

		// @formatter:on
	}

	/**
	 * Check if the name is a keyword for any of the known database types.
	 *
	 * Use {@link #checkIfKeyword(String, String)} for keywords on a specific database type.
	 */
	public static boolean checkIfKeyword(String name)
	{
		return checkIfKeyword(name, null);
	}

	/**
	 * Check if the name is a keyword for the database type.
	 *
	 * If null is passed, a generic set is used.
	 */
	public static boolean checkIfKeyword(String name, String databaseType)
	{
		if (name == null) return false;
		String lname = name.trim().toLowerCase();

		if (databaseType == null || databaseType.equals("generic"))
		{
			// we don't know which database type, for safety check all known keywords
			return KEYWORDS.values().stream().anyMatch(set -> set.contains(lname));
		}

		Set<String> dbspecificKeywords = KEYWORDS.get(databaseType);
		return (dbspecificKeywords != null && dbspecificKeywords.contains(lname)) || KEYWORDS.get("common").contains(lname);
	}
}
